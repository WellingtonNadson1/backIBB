generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// MODELS
model Account {
  id            String  @id @default(uuid())
  userId        String
  type          String
  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id                  String    @id @default(uuid())
  image_url           String?
  email               String    @unique
  first_name          String
  last_name           String?
  cpf                 String?
  date_nascimento     DateTime?
  sexo                String?
  telefone            String?
  escolaridade        String?
  profissao           String?
  estado_civil        String?
  nome_conjuge        String?
  has_filho           Boolean
  quantidade_de_filho Int?
  cep                 String?
  cidade              String?
  estado              String?
  bairro              String?
  endereco            String?
  numero_casa         String?

  batizado                Boolean
  is_discipulado          Boolean
  discipulador            String?
  supervisao_pertence     String?
  celula                  String?
  encontros               String[]
  escolas                 String[]
  TurmaEscola             TurmaEscola?     @relation(fields: [turmaEscolaId], references: [id])
  situacao_no_reino       String?
  cargo_de_lideranca      String?
  celula_lidera           String[]
  escola_lidera           String[]
  supervisoes_lidera      String[]
  presencas_aulas_escolas PresencaEscola[]
  presencas_cultos        PresencaCulto[]

  turmaEscolaId String?

  accounts Account[]
  sessions Session[]
  password String?

  date_casamento DateTime?
  date_batizado  DateTime?
  date_decisao   DateTime?
  date_create    DateTime  @default(now())
  date_update    DateTime  @updatedAt

  @@map("user") // Defina um nome de tabela personalizado, se necessário
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Celula {
  id              String    @id @default(uuid())
  nome            String
  lider           String?
  supervisao      String?
  cep             String?
  cidade          String?
  estado          String?
  bairro          String?
  endereco        String?
  numero_casa     String?
  date_inicio     DateTime?
  date_que_ocorre DateTime?
  date_multipicar DateTime?
  supervisaoId    String
  membros         String[]
  userId          String?
  date_create     DateTime  @default(now())
  date_update     DateTime  @updatedAt

  @@map("celula")
}

model Supervisao {
  id              String   @id @default(uuid())
  nome            String
  cor             String
  supervisor      String?
  celulas         String[]
  membros         String[]
  nivelSupervisao String?
  date_create     DateTime @default(now())
  date_update     DateTime @updatedAt

  @@map("supervisao") // Defina um nome de tabela personalizado, se necessário
}

model NivelSupervisao {
  id         String   @id @default(uuid())
  nome       String
  descricao  String?
  supervisao String[]

  @@map("nivel_supervisao")
}

// Model das Presencas nos Cultos / Eventos (conferências)
model CultoGeral {
  id                    String         @id @default(uuid())
  nome                  String
  descricao             String?
  lista_cultos_semanais CultoSemanal[]
  date_create           DateTime       @default(now())
  date_update           DateTime       @updatedAt

  @@map("culto_geral")
}

model CultoSemanal {
  id           String            @id @default(uuid())
  nome         String
  descricao    String?
  cultos       CultoIndividual[]
  cultoGeral   CultoGeral?       @relation(fields: [cultoGeralId], references: [id])
  cultoGeralId String?
  date_create  DateTime          @default(now())
  date_update  DateTime          @updatedAt

  @@map("culto_semanal")
}

model CultoIndividual {
  id                 String          @id @default(uuid())
  data_inicio_culto  DateTime
  data_termino_culto DateTime
  status             String // status (realizada, cancelada, etc.)
  presencas_culto    PresencaCulto[]
  culto_semana       CultoSemanal?   @relation(fields: [cultoSemanalId], references: [id])
  cultoSemanalId     String?

  @@map("culto_individual")
}

model PresencaCulto {
  id                String           @id @default(uuid())
  status            Boolean //Pode ter um status (presente, ausente, justificado, etc.)
  membro            User?            @relation(fields: [userId], references: [id])
  userId            String?
  presenca_culto    CultoIndividual? @relation(fields: [cultoIndividualId], references: [id])
  cultoIndividualId String?
}

// Model das Presencas nas aulas das Escolas
model Escola {
  id          String        @id @default(uuid())
  nome        String
  descricao   String?
  lider       String?
  turmas      TurmaEscola[]
  alunos      String[]
  userId      String?
  date_create DateTime      @default(now())
  date_update DateTime      @updatedAt

  @@map("escola")
}

model TurmaEscola {
  id             String       @id @default(uuid())
  nome           String
  descricao      String?
  escola         Escola?      @relation(fields: [escolaId], references: [id])
  escolaId       String?
  aulas_marcadas AulaEscola[]
  alunos         User[]
  userId         String?
  date_inicio    DateTime?
  date_conclusao DateTime?
  date_create    DateTime     @default(now())
  date_update    DateTime     @updatedAt

  @@map("turma_escola")
}

model AulaEscola {
  id            String           @id @default(uuid())
  data_aula     DateTime
  status        String // status (realizada, cancelada, etc.)
  presencas     PresencaEscola[]
  turma         TurmaEscola?     @relation(fields: [turmaEscolaId], references: [id])
  turmaEscolaId String?
}

model PresencaEscola {
  id                        String      @id @default(uuid())
  status                    String //Pode ter um status (presente, ausente, justificado, etc.)
  aluno                     User?       @relation(fields: [userId], references: [id])
  userId                    String?
  aula_presenca_qual_escola AulaEscola? @relation(fields: [aulaEscolaId], references: [id])
  aulaEscolaId              String?
}

model Encontros {
  id            String   @id @default(uuid())
  nome          String
  descricao     String?
  participantes String[]
  date_create   DateTime @default(now())
  date_update   DateTime @updatedAt

  @@map("encontros")
}

model SituacaoNoReino {
  id          String   @id @default(uuid())
  nome        String
  membros     String[]
  date_create DateTime @default(now())
  date_update DateTime @updatedAt

  @@map("situacao_no_reino")
}

model CargoDeLideranca {
  id          String   @id @default(uuid())
  nome        String
  date_create DateTime @default(now())
  date_update DateTime @updatedAt
  membros     String[]

  @@map("cargo_de_lideranca")
}
