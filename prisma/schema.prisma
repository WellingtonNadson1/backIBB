generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// MODELS
model Account {
  id            String  @id @default(uuid())
  userId        String
  type          String
  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id                  String    @id @default(uuid())
  image_url           String?
  email               String    @unique
  first_name          String
  last_name           String?
  cpf                 String?
  dateNasc            DateTime?
  sexo                String?
  telefone            String?
  escolaridade        String?
  profissao           String?
  estado_civil        String?
  nome_conjuge        String?
  has_filho           Boolean
  quantidade_de_filho Int?
  endereco            Endereco? @relation(fields: [enderecoId], references: [id])

  batizado                Boolean
  is_discipulado          Boolean
  discipulador            String?
  supervisao_pertence     Supervisao?       @relation(fields: [supervisaoId], references: [id])
  celula                  Celula?           @relation(fields: [celulaId], references: [id])
  encontros               Encontros[]
  escolas                 Escola[]
  TurmaEscola             TurmaEscola?      @relation(fields: [turmaEscolaId], references: [id])
  situacao_no_reino       SituacaoNoReino?  @relation(fields: [situacaoNoReinoId], references: [id])
  cargo_de_lideranca      CargoDeLideranca? @relation(fields: [cargoDeLiderancaId], references: [id])
  celula_lidera           Celula[]          @relation("LiderCelula")
  escola_lidera           Escola[]          @relation("LiderEscola")
  supervisoes_lidera      Supervisao[]      @relation("Supervisor")
  participacoes_eventos   Participacao[]
  presencas_aulas_escolas Presenca[]

  celulaId           String?
  enderecoId         String?
  supervisaoId       String?
  turmaEscolaId      String?
  situacaoNoReinoId  String?
  cargoDeLiderancaId String?

  accounts Account[]
  sessions Session[]
  password String?

  date_casamento DateTime?
  date_batizado  DateTime?
  date_decisao   DateTime?
  date_create    DateTime  @default(now())
  date_update    DateTime  @updatedAt

  @@map("user") // Defina um nome de tabela personalizado, se necessário
}

model Evento {
  id            String         @id @default(uuid())
  startDatetime DateTime
  endDatetime   DateTime
  image_url     String?
  name          String
  descricao     String
  recorrencia   String?
  participacoes Participacao[]

  @@map("evento")
}

model Participacao {
  id       String  @id @default(uuid())
  presente Boolean
  evento   Evento  @relation(fields: [eventoId], references: [id])
  membro   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventoId String
  userId   String

  @@map("participacao")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Endereco {
  id          String   @id @default(uuid())
  cep         String?
  cidade      String?
  estado      String?
  endereco    String?
  numero      String?
  date_create DateTime @default(now())
  date_update DateTime @updatedAt
  membro      User[]

  @@map("endereco")
}

model Celula {
  id              String     @id @default(uuid())
  nome            String
  lider           User?      @relation("LiderCelula", fields: [userId], references: [id])
  supervisao      Supervisao @relation(fields: [supervisaoId], references: [id])
  cep             String?
  cidade          String?
  estado          String?
  endereco        String?
  numero          String?
  date_inicio     DateTime?
  date_que_ocorre DateTime?
  date_multipicar DateTime?
  supervisaoId    String
  membros         User[]
  userId          String?
  date_create     DateTime   @default(now())
  date_update     DateTime   @updatedAt

  @@map("celula")
}

model Supervisao {
  id                String           @id @default(uuid())
  nome              String
  cor               String
  supervisor        User?            @relation("Supervisor", fields: [userId], references: [id])
  celulas           Celula[]
  membros           User[]
  nivelSupervisao   NivelSupervisao? @relation(fields: [nivelSupervisaoId], references: [id])
  userId            String?
  nivelSupervisaoId String?
  date_create       DateTime         @default(now())
  date_update       DateTime         @updatedAt

  @@map("supervisao") // Defina um nome de tabela personalizado, se necessário
}

model NivelSupervisao {
  id         String       @id @default(uuid())
  nome       String
  descricao  String?
  supervisao Supervisao[]

  @@map("nivel_supervisao")
}

model Escola {
  id          String        @id @default(uuid())
  nome        String
  descricao   String?
  lider       User?         @relation("LiderEscola", fields: [userId], references: [id])
  turmas      TurmaEscola[]
  alunos      User[]
  userId      String?
  date_create DateTime      @default(now())
  date_update DateTime      @updatedAt

  @@map("escola")
}

model TurmaEscola {
  id                  String       @id @default(uuid())
  nome                String
  descricao           String?
  date_aulas_marcadas DateTime[]
  aulas               AulaEscola[]
  date_inicio         DateTime?
  date_conclusao      DateTime?
  userId              String?
  alunos              User[]
  escola              Escola?      @relation(fields: [escolaId], references: [id])
  escolaId            String?
  date_create         DateTime     @default(now())
  date_update         DateTime     @updatedAt

  @@map("turma_escola")
}

model AulaEscola {
  id            String       @id @default(uuid())
  data_aula     DateTime
  status        String // status (realizada, cancelada, etc.)
  presencas     Presenca[]
  turma         TurmaEscola? @relation(fields: [turmaEscolaId], references: [id])
  turmaEscolaId String?
}

model Presenca {
  id           String      @id @default(uuid())
  status       String //Pode ter um status (presente, ausente, justificado, etc.)
  aluno        User?       @relation(fields: [userId], references: [id])
  userId       String?
  sessao       AulaEscola? @relation(fields: [aulaEscolaId], references: [id])
  aulaEscolaId String?
}

model Encontros {
  id            String   @id @default(uuid())
  nome          String
  descricao     String?
  participantes User[]
  date_create   DateTime @default(now())
  date_update   DateTime @updatedAt

  @@map("encontros")
}

model SituacaoNoReino {
  id          String   @id @default(uuid())
  nome        String
  membros     User[]
  date_create DateTime @default(now())
  date_update DateTime @updatedAt

  @@map("situacao_no_reino")
}

model CargoDeLideranca {
  id          String   @id @default(uuid())
  nome        String
  date_create DateTime @default(now())
  date_update DateTime @updatedAt
  membros     User[]

  @@map("cargo_de_lideranca")
}
