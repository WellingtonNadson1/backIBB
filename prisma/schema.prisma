generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AulaEscola {
  id            String           @id @default(uuid())
  data_aula     DateTime
  status        String
  turmaEscolaId String?
  date_create   DateTime         @default(now())
  date_update   DateTime         @updatedAt
  turma         TurmaEscola?     @relation(fields: [turmaEscolaId], references: [id])
  presencas     PresencaEscola[]
}

model PresencaCulto {
  id                String           @id @default(uuid())
  status            Boolean
  userId            String?
  cultoIndividualId String?
  date_create       DateTime         @default(now())
  date_update       DateTime         @updatedAt
  presenca_culto    CultoIndividual? @relation(fields: [cultoIndividualId], references: [id], onDelete: Cascade)
  membro            User?            @relation(fields: [userId], references: [id])
}

model PresencaEscola {
  id                        String      @id @default(uuid())
  status                    String
  userId                    String?
  aulaEscolaId              String?
  date_create               DateTime    @default(now())
  date_update               DateTime    @updatedAt
  aula_presenca_qual_escola AulaEscola? @relation(fields: [aulaEscolaId], references: [id])
  aluno                     User?       @relation(fields: [userId], references: [id])
}

model PresencaReuniaoCelula {
  id                   String         @id @default(uuid())
  status               Boolean
  userId               String?
  reuniaoCelulaId      String?
  date_create          DateTime       @default(now())
  date_update          DateTime       @updatedAt
  which_reuniao_celula ReuniaoCelula? @relation(fields: [reuniaoCelulaId], references: [id], onDelete: Cascade)
  membro               User?          @relation(fields: [userId], references: [id])
}

model RoleNew {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @db.VarChar(255)
}

model CargoDeLideranca {
  id          String   @id @default(uuid())
  nome        String
  date_create DateTime @default(now())
  date_update DateTime @updatedAt
  membros     User[]

  @@map("cargo_de_lideranca")
}

model Celula {
  id              String          @id @default(uuid())
  nome            String
  cep             String?
  cidade          String?
  estado          String?
  endereco        String?
  date_inicio     DateTime?
  date_que_ocorre String?
  date_multipicar DateTime?
  date_create     DateTime        @default(now())
  date_update     DateTime        @updatedAt
  supervisaoId    String
  userId          String?
  numero_casa     String?
  bairro          String?
  supervisao      Supervisao      @relation(fields: [supervisaoId], references: [id])
  lider           User?           @relation("LiderCelula", fields: [userId], references: [id])
  reunioes_celula ReuniaoCelula[]
  membros         User[]

  @@map("celula")
}

model CultoGeral {
  id                    String         @id @default(uuid())
  nome                  String
  descricao             String?
  date_create           DateTime       @default(now())
  date_update           DateTime       @updatedAt
  lista_cultos_semanais CultoSemanal[]

  @@map("culto_geral")
}

model CultoIndividual {
  id                 String          @id @default(uuid())
  data_inicio_culto  DateTime
  data_termino_culto DateTime
  status             String
  cultoSemanalId     String?
  date_create        DateTime        @default(now())
  date_update        DateTime        @updatedAt
  presencas_culto    PresencaCulto[]
  culto_semana       CultoSemanal?   @relation(fields: [cultoSemanalId], references: [id])

  @@map("culto_individual")
}

model CultoSemanal {
  id           String            @id @default(uuid())
  nome         String
  descricao    String?
  cultoGeralId String?
  date_create  DateTime          @default(now())
  date_update  DateTime          @updatedAt
  cultos       CultoIndividual[]
  cultoGeral   CultoGeral?       @relation(fields: [cultoGeralId], references: [id])

  @@map("culto_semanal")
}

model discipulado {
  discipulado_id       String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  usuario_id           String
  discipulador_id      String
  data_ocorreu         DateTime             @db.Date
  discipulador_usuario discipulador_usuario @relation(fields: [usuario_id, discipulador_id], references: [usuario_id, discipulador_id], onDelete: Cascade, onUpdate: NoAction)
}

model discipulador_usuario {
  usuario_id        String
  discipulador_id   String
  discipulado       discipulado[]
  user_discipulador User          @relation("discipulos", fields: [discipulador_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_discipulos   User          @relation("discipulador", fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([usuario_id, discipulador_id])
}

model Encontros {
  id            String   @id @default(uuid())
  nome          String
  descricao     String?
  date_create   DateTime @default(now())
  date_update   DateTime @updatedAt
  participantes User[]   @relation("EncontrosToUser")

  @@map("encontros")
}

model Escola {
  id          String        @id @default(uuid())
  nome        String
  descricao   String?
  userId      String?
  date_create DateTime      @default(now())
  date_update DateTime      @updatedAt
  lider       User?         @relation("LiderEscola", fields: [userId], references: [id])
  turmas      TurmaEscola[]
  alunos      User[]        @relation("EscolaToUser")

  @@map("escola")
}

model LicaoCelula {
  id                   String           @id @default(uuid())
  titulo               String
  versiculo_chave      String
  link_objeto_aws      String?
  data_inicio          DateTime
  data_termino         DateTime
  date_create          DateTime         @default(now())
  date_update          DateTime         @updatedAt
  temaLicaoCelulaId    String?
  licao_lancando_redes Boolean?         @default(false)
  TemaLicaoCelula      TemaLicaoCelula? @relation(fields: [temaLicaoCelulaId], references: [id], onDelete: Cascade)

  @@map("licao_celula")
}

model NivelSupervisao {
  id          String       @id @default(uuid())
  nome        String
  descricao   String?
  date_create DateTime     @default(now())
  date_update DateTime     @updatedAt
  supervisao  Supervisao[]

  @@map("nivel_supervisao")
}

model RefreshToken {
  id            String @id @default(uuid())
  expiresIn     Int
  userIdRefresh String @unique
  user          User   @relation(fields: [userIdRefresh], references: [id])

  @@map("refresh_token")
}

model ReuniaoCelula {
  id                               String                  @id @default(uuid())
  data_reuniao                     DateTime?
  status                           String
  celulaId                         String?
  date_create                      DateTime                @default(now())
  date_update                      DateTime                @updatedAt
  visitantes                       Int?
  almas_ganhas                     Int?
  presencas_membros_reuniao_celula PresencaReuniaoCelula[]
  celula                           Celula?                 @relation(fields: [celulaId], references: [id], onDelete: Cascade)

  @@map("reuniao_celula")
}

model rolenew {
  id         String       @id @default(dbgenerated("gen_random_uuid()"))
  name       String?
  user_roles user_roles[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model SituacaoNoReino {
  id          String   @id @default(uuid())
  nome        String
  date_create DateTime @default(now())
  date_update DateTime @updatedAt
  membros     User[]

  @@map("situacao_no_reino")
}

model Supervisao {
  id                String           @id @default(uuid())
  nome              String
  cor               String
  date_create       DateTime         @default(now())
  date_update       DateTime         @updatedAt
  nivelSupervisaoId String?
  userId            String?
  celulas           Celula[]
  nivelSupervisao   NivelSupervisao? @relation(fields: [nivelSupervisaoId], references: [id])
  supervisor        User?            @relation("Supervisor", fields: [userId], references: [id])
  membros           User[]

  @@map("supervisao")
}

model Dizimo {
  id           String   @id @default(uuid())
  valor        Decimal?
  data_dizimou DateTime
  date_create  DateTime @default(now())
  date_update  DateTime @updatedAt
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])

  @@map("dizimo")
}

model Oferta {
  id           String   @id @default(uuid())
  valor        Decimal?
  data_ofertou DateTime
  date_create  DateTime @default(now())
  date_update  DateTime @updatedAt
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])

  @@map("oferta")
}

model Agenda {
  status       Boolean  @default(false)
  id           String   @id @default(uuid())
  title        String?
  description  String?
  data_inicio  DateTime
  data_termino DateTime
  date_create  DateTime @default(now())
  date_update  DateTime @updatedAt

  @@map("agenda")
}

model TemaLicaoCelula {
  id              String        @id @default(uuid())
  tema            String
  link_folder_aws String?
  data_inicio     DateTime
  data_termino    DateTime
  date_create     DateTime      @default(now())
  date_update     DateTime      @updatedAt
  folderName      String?
  status          Boolean       @default(false)
  versiculo_chave String?       @default("versiculo")
  licoes_celula   LicaoCelula[]

  @@map("tema_licao_celula")
}

model Token {
  id          String    @id @default(uuid())
  type        TokenType
  date_create DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model TurmaEscola {
  id             String       @id @default(uuid())
  nome           String
  descricao      String?
  date_inicio    DateTime?
  date_conclusao DateTime?
  userId         String?
  escolaId       String?
  date_create    DateTime     @default(now())
  date_update    DateTime     @updatedAt
  aulas_marcadas AulaEscola[]
  escola         Escola?      @relation(fields: [escolaId], references: [id])
  alunos         User[]

  @@map("turma_escola")
}

model User {
  id                       String                  @id @default(uuid())
  image_url                String?
  email                    String                  @unique
  first_name               String
  last_name                String
  cpf                      String?
  date_nascimento          DateTime?
  sexo                     String
  telefone                 String
  escolaridade             String?
  profissao                String?
  estado_civil             String
  nome_conjuge             String?
  has_filho                Boolean?
  batizado                 Boolean?
  is_discipulado           Boolean?
  discipuladorId           String?
  date_casamento           DateTime?
  date_batizado            DateTime?
  date_decisao             DateTime?
  date_create              DateTime                @default(now())
  date_update              DateTime                @updatedAt
  password                 String?
  turmaEscolaId            String?
  cep                      String?
  cidade                   String?
  endereco                 String?
  estado                   String?
  numero_casa              String?
  bairro                   String?
  cargoDeLiderancaId       String
  celulaId                 String?
  situacaoNoReinoId        String
  supervisaoId             String
  quantidade_de_filho      Int?
  role                     Role                    @default(MEMBER)
  userIdRefresh            String?
  role_id                  String?
  presencas_cultos         PresencaCulto[]
  presencas_aulas_escolas  PresencaEscola[]
  presencas_reuniao_celula PresencaReuniaoCelula[]
  celula_lidera            Celula[]                @relation("LiderCelula")
  discipulos               discipulador_usuario[]  @relation("discipulos")
  discipulador             discipulador_usuario[]  @relation("discipulador")
  Dizimo                   Dizimo[]
  escola_lidera            Escola[]                @relation("LiderEscola")
  Oferta                   Oferta[]
  refreshTokens            RefreshToken?
  sessions                 Session[]
  supervisoes_lidera       Supervisao[]            @relation("Supervisor")
  tokens                   Token[]
  cargo_de_lideranca       CargoDeLideranca        @relation(fields: [cargoDeLiderancaId], references: [id], onDelete: Restrict)
  celula                   Celula?                 @relation(fields: [celulaId], references: [id])
  user                     User?                   @relation("userTouser", fields: [discipuladorId], references: [id], map: "user_discipuladorid_fkey")
  other_user               User[]                  @relation("userTouser")
  situacao_no_reino        SituacaoNoReino         @relation(fields: [situacaoNoReinoId], references: [id], onDelete: Restrict)
  supervisao_pertence      Supervisao              @relation(fields: [supervisaoId], references: [id], onDelete: Restrict)
  TurmaEscola              TurmaEscola?            @relation(fields: [turmaEscolaId], references: [id])
  user_roles               user_roles[]
  encontros                Encontros[]             @relation("EncontrosToUser")
  escolas                  Escola[]                @relation("EscolaToUser")

  @@map("user")
}

model user_roles {
  user_id String
  role_id String
  rolenew rolenew @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

enum Role {
  USERLIDER
  USERSUPERVISOR
  USERCENTRAL
  USERPASTOR
  MEMBER
  ADMIN
  OUTRAIGREJA
  AFASTADO
}

enum TokenType {
  PASSWORD_RECOVER
}

enum role {
  USERLIDER
  USERSUPERVISOR
  USERCENTRAL
  USERPASTOR
  MEMBER
  ADMIN
  OUTRAIGREJA
  AFASTADO
}
